// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "sqlite" // Vous pouvez utiliser un autre type de base de données, comme PostgreSQL ou MySQL
  url      = "file:../bdd.db"
}

model Crypto {
  id           Int           @id @default(autoincrement())
  name         String // Nom complet de la crypto
  symbol       String // Abréviation (surnom)
  transactions Transaction[] // Transactions associées
  dailyStats   DailyStat[] // Statistiques quotidiennes
  monthlyStats MonthlyStat[] // Statistiques mensuelles
  portfolios   Portfolio[] // Portefeuilles associés
  alerts       Alert[] // Alertes associées
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  cryptoId           Int
  crypto             Crypto               @relation(fields: [cryptoId], references: [id])
  montantAchatEUR    Float
  prixUnitaire       Float
  montantAchatCoin   Float
  dateAchat          DateTime
  typeAchat          String
  isConverted        Boolean
  convertCurrency    String? // Devise de conversion (nullable)
  convertQty         Float? // Quantité convertie (nullable)
  totalCoins         Float
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             Int? // Utilisateur associé (nullable)
  user               User?                @relation(fields: [userId], references: [id])
  transactionHistory TransactionHistory[] // Historique des modifications
}

model DailyStat {
  id            Int      @id @default(autoincrement())
  cryptoId      Int
  crypto        Crypto   @relation(fields: [cryptoId], references: [id])
  date          DateTime @unique // Date unique pour chaque crypto
  prixMinimum   Float?
  prixMaximum   Float?
  prixMoyen     Float
  quantiteCoin  Float
  montantCrypto Float
  variation     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MonthlyStat {
  id            Int      @id @default(autoincrement())
  cryptoId      Int
  crypto        Crypto   @relation(fields: [cryptoId], references: [id])
  date          DateTime @unique // Date unique pour chaque crypto
  prixMinimum   Float?
  prixMaximum   Float?
  prixMoyen     Float
  quantiteCoin  Float
  montantCrypto Float
  variation     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  passwordHash String
  transactions Transaction[] // Transactions associées
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  portfolios   Portfolio[] // Portefeuilles associés
  alerts       Alert[] // Alertes associées
  sessions     Session[] // Sessions associées
}

model Portfolio {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  cryptoId  Int
  crypto    Crypto   @relation(fields: [cryptoId], references: [id])
  quantity  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alert {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  cryptoId  Int
  crypto    Crypto   @relation(fields: [cryptoId], references: [id])
  threshold Float
  alertType String // ex: "above", "below"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exchange {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionType {
  id        Int      @id @default(autoincrement())
  name      String   @unique // ex: "buy", "sell", "transfer"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  url         String
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TransactionHistory {
  id            Int         @id @default(autoincrement())
  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  changeType    String // ex: "update", "delete"
  oldValue      String
  newValue      String
  changedAt     DateTime    @default(now())
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique // Token d'authentification
  createdAt DateTime @default(now())
  expiresAt DateTime // Date d'expiration du token
}
